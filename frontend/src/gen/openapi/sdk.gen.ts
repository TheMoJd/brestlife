// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-next';
import type { RegisterUserData, RegisterUserResponse, AuthenticateUserData, AuthenticateUserResponse, HealthCheckData, HealthCheckResponse, UploadEventImageData, UploadEventImageResponse, UploadPlaceImageData, UploadPlaceImageResponse, ListUsersData, ListUsersResponse, CreateUserData, CreateUserResponse, DeleteUserByIdData, GetUserByIdData, GetUserByIdResponse, UpdateUserByIdData, UpdateUserByIdResponse, ListPlacesData, ListPlacesResponse, CreatePlaceData, CreatePlaceResponse, DeletePlaceByIdData, GetPlaceByIdData, GetPlaceByIdResponse, UpdatePlaceByIdData, UpdatePlaceByIdResponse, ListJobsData, ListJobsResponse, CreateJobData, CreateJobResponse, DeleteJobByIdData, GetJobByIdData, GetJobByIdResponse, UpdateJobByIdData, UpdateJobByIdResponse, ListEventsData, ListEventsResponse, CreateEventData, CreateEventResponse, DeleteEventByIdData, GetEventByIdData, GetEventByIdResponse, UpdateEventByIdData, UpdateEventByIdResponse, ListDealsData, ListDealsResponse, CreateDealData, CreateDealResponse, DeleteDealByIdData, GetDealByIdData, GetDealByIdResponse, UpdateDealByIdData, UpdateDealByIdResponse, ListCategoriesData, ListCategoriesResponse, CreateCategoryData, CreateCategoryResponse, DeleteCategoryByIdData, GetCategoryByIdData, GetCategoryByIdResponse, UpdateCategoryByIdData, UpdateCategoryByIdResponse, ListCategoriesByTypeData, ListCategoriesByTypeResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register a new user
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserResponse, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Authenticate a user
 */
export const authenticateUser = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateUserResponse, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check API health status
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponse, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Upload une image pour un événement
 */
export const uploadEventImage = <ThrowOnError extends boolean = false>(options: Options<UploadEventImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadEventImageResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/images/events/{eventId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Upload une image pour une place
 */
export const uploadPlaceImage = <ThrowOnError extends boolean = false>(options: Options<UploadPlaceImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadPlaceImageResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/images/places/{placeId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * List all users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user by id
 */
export const deleteUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by id
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user by id
 */
export const updateUserById = <ThrowOnError extends boolean = false>(options: Options<UpdateUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all places
 */
export const listPlaces = <ThrowOnError extends boolean = false>(options?: Options<ListPlacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPlacesResponse, unknown, ThrowOnError>({
        url: '/places',
        ...options
    });
};

/**
 * Create a place
 */
export const createPlace = <ThrowOnError extends boolean = false>(options: Options<CreatePlaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePlaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete place by id
 */
export const deletePlaceById = <ThrowOnError extends boolean = false>(options: Options<DeletePlaceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/{id}',
        ...options
    });
};

/**
 * Get place by id
 */
export const getPlaceById = <ThrowOnError extends boolean = false>(options: Options<GetPlaceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaceByIdResponse, unknown, ThrowOnError>({
        url: '/places/{id}',
        ...options
    });
};

/**
 * Update place by id
 */
export const updatePlaceById = <ThrowOnError extends boolean = false>(options: Options<UpdatePlaceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlaceByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all jobs
 */
export const listJobs = <ThrowOnError extends boolean = false>(options?: Options<ListJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListJobsResponse, unknown, ThrowOnError>({
        url: '/jobs',
        ...options
    });
};

/**
 * Create a job
 */
export const createJob = <ThrowOnError extends boolean = false>(options: Options<CreateJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateJobResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete job by id
 */
export const deleteJobById = <ThrowOnError extends boolean = false>(options: Options<DeleteJobByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/jobs/{id}',
        ...options
    });
};

/**
 * Get job by id
 */
export const getJobById = <ThrowOnError extends boolean = false>(options: Options<GetJobByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobByIdResponse, unknown, ThrowOnError>({
        url: '/jobs/{id}',
        ...options
    });
};

/**
 * Update job by id
 */
export const updateJobById = <ThrowOnError extends boolean = false>(options: Options<UpdateJobByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateJobByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/jobs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all events
 */
export const listEvents = <ThrowOnError extends boolean = false>(options?: Options<ListEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEventsResponse, unknown, ThrowOnError>({
        url: '/events',
        ...options
    });
};

/**
 * Create an event
 */
export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete event by id
 */
export const deleteEventById = <ThrowOnError extends boolean = false>(options: Options<DeleteEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options
    });
};

/**
 * Get event by id
 */
export const getEventById = <ThrowOnError extends boolean = false>(options: Options<GetEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventByIdResponse, unknown, ThrowOnError>({
        url: '/events/{id}',
        ...options
    });
};

/**
 * Update event by id
 */
export const updateEventById = <ThrowOnError extends boolean = false>(options: Options<UpdateEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all deals
 */
export const listDeals = <ThrowOnError extends boolean = false>(options?: Options<ListDealsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDealsResponse, unknown, ThrowOnError>({
        url: '/deals',
        ...options
    });
};

/**
 * Create a deal
 */
export const createDeal = <ThrowOnError extends boolean = false>(options: Options<CreateDealData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDealResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete deal by id
 */
export const deleteDealById = <ThrowOnError extends boolean = false>(options: Options<DeleteDealByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deals/{id}',
        ...options
    });
};

/**
 * Get deal by id
 */
export const getDealById = <ThrowOnError extends boolean = false>(options: Options<GetDealByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDealByIdResponse, unknown, ThrowOnError>({
        url: '/deals/{id}',
        ...options
    });
};

/**
 * Update deal by id
 */
export const updateDealById = <ThrowOnError extends boolean = false>(options: Options<UpdateDealByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDealByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/deals/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all categories
 */
export const listCategories = <ThrowOnError extends boolean = false>(options?: Options<ListCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCategoriesResponse, unknown, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

/**
 * Create a category
 */
export const createCategory = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCategoryResponse, unknown, ThrowOnError>({
        url: '/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete category by id
 */
export const deleteCategoryById = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/categories/{id}',
        ...options
    });
};

/**
 * Get category by id
 */
export const getCategoryById = <ThrowOnError extends boolean = false>(options: Options<GetCategoryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryByIdResponse, unknown, ThrowOnError>({
        url: '/categories/{id}',
        ...options
    });
};

/**
 * Update category by id
 */
export const updateCategoryById = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCategoryByIdResponse, unknown, ThrowOnError>({
        url: '/categories/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List categories by a given type
 */
export const listCategoriesByType = <ThrowOnError extends boolean = false>(options: Options<ListCategoriesByTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCategoriesByTypeResponse, unknown, ThrowOnError>({
        url: '/categories/type/{type}',
        ...options
    });
};