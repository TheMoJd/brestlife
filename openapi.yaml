openapi: "3.0.4"
info:
  title: API Brestlife
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: SpringBoot REST API
paths:
  /health:
    get:
      summary: "Check API health status"
      operationId: "healthCheck"
      tags:
        - health
      responses:
        200:
          description: "API is up and running"
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
  /users:
    get:
      summary: "List all users"
      operationId: "listUsers"
      tags:
        - users
      responses:
        200:
          description: "A list of users."
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: "Create a user"
      operationId: "createUser"
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: "User created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      summary: "Get user by id"
      operationId: "getUserById"
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "User found"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: "Update user by id"
      operationId: "updateUserById"
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: "User updated"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"

    delete:
      summary: "Delete user by id"
      operationId: "deleteUserById"
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: "User deleted"
  /places:
    get:
      summary: "List all places"
      operationId: "listPlaces"
      tags:
        - places
      responses:
        200:
          description: "A list of places."
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Place"
    post:
      summary: "Create a place"
      operationId: "createPlace"
      tags:
        - places
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Place"
        required: true
      responses:
        200:
          description: "Place created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Place"
  /places/{id}:
    get:
      summary: "Get place by id"
      operationId: "getPlaceById"
      tags:
        - places
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Place found"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Place"
    put:
      summary: "Update place by id"
      operationId: "updatePlaceById"
      tags:
        - places
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Place"
        required: true
      responses:
        200:
          description: "Place updated"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Place"

    delete:
      summary: "Delete place by id"
      operationId: "deletePlaceById"
      tags:
        - places
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: "Place deleted"
  /jobs:
    get:
      summary: "List all jobs"
      operationId: "listJobs"
      tags:
        - jobs
      responses:
        200:
          description: "A list of jobs."
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"
    post:
      summary: "Create a job"
      operationId: "createJob"
      tags:
        - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        200:
          description: "Job created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Job"
  /jobs/{id}:
    get:
      summary: "Get job by id"
      operationId: "getJobById"
      tags:
        - jobs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Job found"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Job"
    put:
      summary: "Update job by id"
      operationId: "updateJobById"
      tags:
        - jobs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        200:
          description: "Job updated"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Job"
    delete:
      summary: "Delete job by id"
      operationId: "deleteJobById"
      tags:
        - jobs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: "Job deleted"

  /events:
    get:
      summary: "List all events"
      operationId: "listEvents"
      tags:
        - events
      responses:
        200:
          description: "A list of events."
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    post:
      summary: "Create an event"
      operationId: "createEvent"
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        200:
          description: "Event created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Event"
  /events/{id}:
    get:
      summary: "Get event by id"
      operationId: "getEventById"
      tags:
        - events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Event found"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Event"
    put:
      summary: "Update event by id"
      operationId: "updateEventById"
      tags:
        - events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        200:
          description: "Event updated"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Event"
    delete:
      summary: "Delete event by id"
      operationId: "deleteEventById"
      tags:
        - events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: "Event deleted"

  /deals:
    get:
      summary: "List all deals"
      operationId: "listDeals"
      tags:
        - deals
      responses:
        200:
          description: "A list of deals."
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deal"
    post:
      summary: "Create a deal"
      operationId: "createDeal"
      tags:
        - deals
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deal"
        required: true
      responses:
        200:
          description: "Deal created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Deal"
  /deals/{id}:
    get:
      summary: "Get deal by id"
      operationId: "getDealById"
      tags:
        - deals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Deal found"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Deal"
    put:
      summary: "Update deal by id"
      operationId: "updateDealById"
      tags:
        - deals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deal"
        required: true
      responses:
        200:
          description: "Deal updated"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Deal"
    delete:
      summary: "Delete deal by id"
      operationId: "deleteDealById"
      tags:
        - deals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: "Deal deleted"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - STUDENT
            - ADMIN
            - COMPANY
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
        subCategory:
          type: string
        type:
          type: string
          enum:
            - PLACE
            - JOB
            - EVENT
            - DEAL
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/User"
    Place:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        address:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        price:
          type: number
          format: double
        createdBy:
          $ref: "#/components/schemas/User"
    Job:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        companyName:
          type: string
        location:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        duration:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        contactEmail:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/User"
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        date:
          type: string
          format: date-time
        location:
          type: string
        price:
          type: number
          format: double
        createdBy:
          $ref: "#/components/schemas/User"
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
    Deal:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        link:
          type: string
        old_price:
          type: number
          format: double
        new_price:
          type: number
          format: double
        date_end:
          type: string
          format: date-time
        company:
          type: string
        reserve:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        createdBy:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
